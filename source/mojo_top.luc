module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  alu alu;
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      dff counter[30]; // counter to cycle through states
      multi_seven_seg seg;
      // each state for every operation with 4 different error states (arithmetic, boolean, compare, shift) & success state
      fsm state = {INIT,ADD,SUB,MULT,ADDERR,AND,OR,XOR,A,BOOLERR,SHL,SHR,SRA,SHIFTERR,CMPEQ,CMPLT,CMPLE,CMPERR,SS}; 
    }
  }
  
  const X = 29;

  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
               
  
    io_led[2] = alu.out; // to indicate result of each operation
    
    
    alu.alufn = 6b0; 
    alu.a = 8b0;
    alu.b = 8b0;
    
    io_sel = ~seg.sel;
    io_seg = ~seg.seg;
    seg.values = {4h0,4h0,4h0,4h0};
    
    case (state.q){ 
    
      
      state.INIT: // initial state
        counter.d = 0; 
        io_led = 3x{{8h00}};
        led = 8h00;  
        if (io_dip[1][0] == 1){ // switch on io_dip[1][0] on IO shield to start test
          state.d = state.ADD;
          
          }
        
      // one set of 8 bit inputs is used for each category of operation (arithmetic, boolean, compare, shift)
      // each set is choosen to produce an unique result for each operation under that category
      
      // arithmetic: a = 01111111 b = 00000001
      // boolean:    a = 01010101 b = 11111111
      // shift:      a = 11000011 b = 00000100
      // compare:    a = 00001111 b = 01111111
        
      //////////////////////////////////arithmetic operations//////////////////////////////////
      // a = 01111111
      // b = 00000001
        
      state.ADD: // addition 
        alu.alufn = 6b0; // ALUFN encodings 
        alu.a = 8b01111111; 
        alu.b = 8b1;
        counter.d = counter.q+1;
        seg.values = {4h0,4h0,4h0,4h1}; // seven segment displays a number (1 ~ 13) to identify each state
        if (counter.q[X] == 1 & alu.out == 8b10000000){ // 01111111 + 00000001 = 10000000 
          counter.d = 0;
          state.d = state.SUB; // proceed to next state if test result is correct  
        }
        else if (counter.q[X] == 1 & (alu.out != 8b10000000)) 
        { state.d = state.ADDERR; } // proceed to arithmetic error state if result does not match expected
        
      state.SUB: // subtraction
        alu.alufn = 6b1; 
        alu.a = 8b01111111; 
        alu.b = 8b1;
        seg.values = {4h0,4h0,4h0,4h2};
        counter.d = counter.q+1;
        if (counter.q[X] == 1 & alu.out == 8b01111110) { // 01111111 - 00000001 = 01111110
          counter.d = 0;
          state.d = state.MULT;
      
        }
        else if (counter.q[X] == 1 & alu.out != 8b01111110) 
        { state.d = state.ADDERR; }
        
      state.MULT: //multiplication
        alu.alufn = 6b000010; 
        alu.a = 8b01111111;
        alu.b = 8b1;
        counter.d = counter.q+1; 
        seg.values = {4h0,4h0,4h0,4h3};     
        if (counter.q[X] == 1 & alu.out == 8b01111111) { // 01111111 * 00000001 = 01111111
          counter.d = 0;
          state.d = state.AND;
        }
        
        else if (counter.q[X] == 1 & alu.out != 8b01111111)
        { state.d = state.ADDERR; }
        
      state.ADDERR: // arithmetic error state
        led = 8b11; // first 2 led lights up to indicate error type
        if (io_dip[1][0] == 0){ // switch off io_dip[1][0] on IO shield to return to initial state
          state.d = state.INIT;      
        }
        
        
        
      //////////////////////////////////boolean operations//////////////////////////////////
      // a = 01010101
      // b = 11111111
        
      state.AND: // boolean AND
        alu.alufn = 6b011000; 
        alu.a = 8b01010101; 
        alu.b = 8b11111111;
        counter.d = counter.q+1;
        seg.values = {4h0,4h0,4h0,4h4};
        if (counter.q[X] == 1 & alu.out == 8b01010101) { // 01010101 & 11111111 = 01010101
          counter.d = 0;
          state.d = state.OR;
          
        }
        else if (counter.q[X] == 1 & alu.out != 8b01010101)
        { state.d = state.BOOLERR; }
        
      state.OR: // boolean OR
        alu.alufn = 6b011110;
        alu.a = 8b01010101;
        alu.b = 8b11111111;
        counter.d = counter.q+1;
        seg.values = {4h0,4h0,4h0,4h5};
        if (counter.q[X] == 1 & alu.out == 8b11111111) { // 01010101 | 11111111 = 11111111
          counter.d = 0;
          state.d = state.XOR;
          
        }
        else if (counter.q[X] == 1 & alu.out != 8b11111111)
        { state.d = state.BOOLERR; }
      
      state.XOR: // boolean XOR 
        alu.alufn = 6b010110;
        alu.a = 8b01010101;
        alu.b = 8b11111111;
        counter.d = counter.q+1;
        seg.values = {4h0,4h0,4h0,4h6};
        if (counter.q[X] == 1 & alu.out == 8b10101010) { // 01010101 ^ 11111111 = 10101010
          counter.d = 0;
          state.d = state.A;
          
        }  
        else if (counter.q[X] == 1 & alu.out != 8b10101010)
        { state.d = state.BOOLERR; }
                  
      state.A: // boolean 'A'
        alu.alufn = 6b011010;
        alu.a = 8b01010101;
        alu.b = 8b11111111;
        counter.d = counter.q+1;
        seg.values = {4h0,4h0,4h0,4h7};
        if (counter.q[X] == 1 & alu.out == 8b01010101) { // a = 01010101
          counter.d = 0;
          state.d = state.SHL;
          
        }
        else if (counter.q[X] == 1 & alu.out != 8b01010101) 
        { state.d = state.BOOLERR; } 
        
      state.BOOLERR: // boolean error state
        led = 8b1100; // led[3:2] lights up to indicate error type
        if (io_dip[1][0] == 0){ 
          state.d = state.INIT;      
        }
        
        
      //////////////////////////////////shift operations//////////////////////////////////
      // a = 11000011
      // b = 00000100
               
      state.SHL: // shift left
        alu.a = 8b11000011;
        alu.b = 8b00000100;
        counter.d = counter.q+1;
        alu.alufn = 6b100000;
        seg.values = {4h0,4h0,4h0,4h8};
        if (counter.q[X] == 1 & alu.out == 8b00110000) { // 11000011 << 4 (00000100) = 00110000
          counter.d = 0;
          state.d = state.SHR;
          
        }
        else if (counter.q[X] == 1 & alu.out != 8b00110000)
        { state.d = state.SHIFTERR; }
     
      state.SHR: // shift right
        alu.a = 8b11000011;
        alu.b = 8b00000100;
        counter.d = counter.q+1;
        alu.alufn = 6b100001;
        seg.values = {4h0,4h0,4h0,9};
        if (counter.q[X] == 1 & alu.out == 8b1100) { // 11000011 >> 4 (00000100) = 00001100
          counter.d = 0;
          state.d = state.SRA;
        }
        else if (counter.q[X] == 1 & alu.out != 8b1100)
        { state.d = state.SHIFTERR; }
      
      state.SRA: // shift right arithmetic
        alu.a = 8b11000011;
        alu.b = 8b00000100;
        counter.d = counter.q+1;
        alu.alufn = 6b100011;
        seg.values = {4h0,4h0,4h1,4h0};
        if (counter.q[X] == 1 & alu.out == 8b11111100) { // $signed(11000011) >>> 4 (00000100) = 11111100
          counter.d = 0;
          state.d = state.CMPEQ;
         }
        else if (counter.q[X] == 1 & alu.out != 8b11111100)
        { state.d = state.SHIFTERR; }
        
      state.SHIFTERR: // shift error state
        led = 8b110000; // led[5:4] lights up to indicate error type
        if (io_dip[1][0] == 0){
          state.d = state.INIT;      
        }
        
        
        
      //////////////////////////////////compare operations//////////////////////////////////
      // a = 00001111
      // b = 01111111
      
      state.CMPEQ: 
        alu.alufn = 6b110011;
        alu.a = 8b00001111;
        alu.b = 8b01111111;
        counter.d = counter.q+1; 
        seg.values = {4h0,4h0,4h1,4h1};
        if (counter.q[X] == 1 & alu.out == 8b0) { // 00001111 != 01111111
          counter.d = 0;
          state.d = state.CMPLT;
        }
        else if (counter.q[X] == 1 & alu.out != 8b0) 
         { state.d = state.CMPERR; }
         
      state.CMPLT:  
        alu.a = 8b00001111;
        alu.b = 8b01111111;
        counter.d = counter.q+1;
        alu.alufn = 6b110101;
        seg.values = {4h0,4h0,4h1,4h2};
        if (counter.q[X] == 1 & alu.out == 8b1) { // 00001111 < 01111111
          counter.d = 0;
          state.d = state.CMPLE;
        }
        else if (counter.q[X] == 1 & alu.out != 8b1)
        { state.d = state.CMPERR; }
      
      state.CMPLE:
        alu.a = 8b00001111;
        alu.b = 8b01111111;
        counter.d = counter.q+1;
        alu.alufn = 6b110111;
        seg.values = {4h0,4h0,4h1,4h3};
        if (counter.q[X] == 1 & alu.out == 8b1) { // 00001111 <= 01111111
          counter.d = 0;
          state.d = state.SS;
        }
        else if (counter.q[X] == 1 & alu.out != 8b1)
        { state.d = state.CMPERR; }
        
      state.CMPERR: // compare error state
        led = 8b11000000; // led[7:6] lights up to indicate error type
        if (io_dip[1][0] == 0){
          state.d = state.INIT;      
        }
    
      state.SS: // success state
        io_led = 3x{{8hFF}}; // all io_leds light up to indicate success
        if (io_dip[1][0] == 0){ // switch off io_dip[1][0] to return to initial state
          state.d = state.INIT;      
        }
      
      default: alu.alufn = 0;
    }
  }
}