/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [8-1:0] M_alu_out;
  reg [6-1:0] M_alu_alufn;
  reg [8-1:0] M_alu_a;
  reg [8-1:0] M_alu_b;
  alu_1 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .out(M_alu_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [29:0] M_counter_d, M_counter_q = 1'h0;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_3 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  localparam INIT_state = 5'd0;
  localparam ADD_state = 5'd1;
  localparam SUB_state = 5'd2;
  localparam MULT_state = 5'd3;
  localparam ADDERR_state = 5'd4;
  localparam AND_state = 5'd5;
  localparam OR_state = 5'd6;
  localparam XOR_state = 5'd7;
  localparam A_state = 5'd8;
  localparam BOOLERR_state = 5'd9;
  localparam SHL_state = 5'd10;
  localparam SHR_state = 5'd11;
  localparam SRA_state = 5'd12;
  localparam SHIFTERR_state = 5'd13;
  localparam CMPEQ_state = 5'd14;
  localparam CMPLT_state = 5'd15;
  localparam CMPLE_state = 5'd16;
  localparam CMPERR_state = 5'd17;
  localparam SS_state = 5'd18;
  
  reg [4:0] M_state_d, M_state_q = INIT_state;
  
  localparam X = 5'h1d;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_led[16+7-:8] = M_alu_out;
    M_alu_alufn = 6'h00;
    M_alu_a = 8'h00;
    M_alu_b = 8'h00;
    io_sel = ~M_seg_sel;
    io_seg = ~M_seg_seg;
    M_seg_values = 16'h0000;
    
    case (M_state_q)
      INIT_state: begin
        M_counter_d = 1'h0;
        io_led = 24'h000000;
        led = 8'h00;
        if (io_dip[8+0+0-:1] == 1'h1) begin
          M_state_d = ADD_state;
        end
      end
      ADD_state: begin
        M_alu_alufn = 6'h00;
        M_alu_a = 8'h7f;
        M_alu_b = 8'h01;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'h0001;
        if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out == 8'h80) begin
          M_counter_d = 1'h0;
          M_state_d = SUB_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 & (M_alu_out != 8'h80)) begin
            M_state_d = ADDERR_state;
          end
        end
      end
      SUB_state: begin
        M_alu_alufn = 6'h01;
        M_alu_a = 8'h7f;
        M_alu_b = 8'h01;
        M_seg_values = 16'h0002;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out == 8'h7e) begin
          M_counter_d = 1'h0;
          M_state_d = MULT_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out != 8'h7e) begin
            M_state_d = ADDERR_state;
          end
        end
      end
      MULT_state: begin
        M_alu_alufn = 6'h02;
        M_alu_a = 8'h7f;
        M_alu_b = 8'h01;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'h0003;
        if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out == 8'h7f) begin
          M_counter_d = 1'h0;
          M_state_d = AND_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out != 8'h7f) begin
            M_state_d = ADDERR_state;
          end
        end
      end
      ADDERR_state: begin
        led = 8'h03;
        if (io_dip[8+0+0-:1] == 1'h0) begin
          M_state_d = INIT_state;
        end
      end
      AND_state: begin
        M_alu_alufn = 6'h18;
        M_alu_a = 8'h55;
        M_alu_b = 8'hff;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'h0004;
        if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out == 8'h55) begin
          M_counter_d = 1'h0;
          M_state_d = OR_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out != 8'h55) begin
            M_state_d = BOOLERR_state;
          end
        end
      end
      OR_state: begin
        M_alu_alufn = 6'h1e;
        M_alu_a = 8'h55;
        M_alu_b = 8'hff;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'h0005;
        if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out == 8'hff) begin
          M_counter_d = 1'h0;
          M_state_d = XOR_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out != 8'hff) begin
            M_state_d = BOOLERR_state;
          end
        end
      end
      XOR_state: begin
        M_alu_alufn = 6'h16;
        M_alu_a = 8'h55;
        M_alu_b = 8'hff;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'h0006;
        if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out == 8'haa) begin
          M_counter_d = 1'h0;
          M_state_d = A_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out != 8'haa) begin
            M_state_d = BOOLERR_state;
          end
        end
      end
      A_state: begin
        M_alu_alufn = 6'h1a;
        M_alu_a = 8'h55;
        M_alu_b = 8'hff;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'h0007;
        if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out == 8'h55) begin
          M_counter_d = 1'h0;
          M_state_d = SHL_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out != 8'h55) begin
            M_state_d = BOOLERR_state;
          end
        end
      end
      BOOLERR_state: begin
        led = 8'h0c;
        if (io_dip[8+0+0-:1] == 1'h0) begin
          M_state_d = INIT_state;
        end
      end
      SHL_state: begin
        M_alu_a = 8'hc3;
        M_alu_b = 8'h04;
        M_counter_d = M_counter_q + 1'h1;
        M_alu_alufn = 6'h20;
        M_seg_values = 16'h0008;
        if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out == 8'h30) begin
          M_counter_d = 1'h0;
          M_state_d = SHR_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out != 8'h30) begin
            M_state_d = SHIFTERR_state;
          end
        end
      end
      SHR_state: begin
        M_alu_a = 8'hc3;
        M_alu_b = 8'h04;
        M_counter_d = M_counter_q + 1'h1;
        M_alu_alufn = 6'h21;
        M_seg_values = 16'h0009;
        if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out == 8'h0c) begin
          M_counter_d = 1'h0;
          M_state_d = SRA_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out != 8'h0c) begin
            M_state_d = SHIFTERR_state;
          end
        end
      end
      SRA_state: begin
        M_alu_a = 8'hc3;
        M_alu_b = 8'h04;
        M_counter_d = M_counter_q + 1'h1;
        M_alu_alufn = 6'h23;
        M_seg_values = 16'h0010;
        if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out == 8'hfc) begin
          M_counter_d = 1'h0;
          M_state_d = CMPEQ_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out != 8'hfc) begin
            M_state_d = SHIFTERR_state;
          end
        end
      end
      SHIFTERR_state: begin
        led = 8'h30;
        if (io_dip[8+0+0-:1] == 1'h0) begin
          M_state_d = INIT_state;
        end
      end
      CMPEQ_state: begin
        M_alu_alufn = 6'h33;
        M_alu_a = 8'h0f;
        M_alu_b = 8'h7f;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'h0011;
        if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out == 8'h00) begin
          M_counter_d = 1'h0;
          M_state_d = CMPLT_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out != 8'h00) begin
            M_state_d = CMPERR_state;
          end
        end
      end
      CMPLT_state: begin
        M_alu_a = 8'h0f;
        M_alu_b = 8'h7f;
        M_counter_d = M_counter_q + 1'h1;
        M_alu_alufn = 6'h35;
        M_seg_values = 16'h0012;
        if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = CMPLE_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out != 8'h01) begin
            M_state_d = CMPERR_state;
          end
        end
      end
      CMPLE_state: begin
        M_alu_a = 8'h0f;
        M_alu_b = 8'h7f;
        M_counter_d = M_counter_q + 1'h1;
        M_alu_alufn = 6'h37;
        M_seg_values = 16'h0013;
        if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = SS_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 & M_alu_out != 8'h01) begin
            M_state_d = CMPERR_state;
          end
        end
      end
      CMPERR_state: begin
        led = 8'hc0;
        if (io_dip[8+0+0-:1] == 1'h0) begin
          M_state_d = INIT_state;
        end
      end
      SS_state: begin
        io_led = 24'hffffff;
        if (io_dip[8+0+0-:1] == 1'h0) begin
          M_state_d = INIT_state;
        end
      end
      default: begin
        M_alu_alufn = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
