/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input [2:0] button,
    output reg gled,
    output reg bled,
    output reg cled,
    output reg [2:0] ledclg
  );
  
  
  
  reg rst;
  
  wire [8-1:0] M_alu_out;
  reg [6-1:0] M_alu_alufn;
  reg [8-1:0] M_alu_a;
  reg [8-1:0] M_alu_b;
  alu_1 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .out(M_alu_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [29:0] M_counter_d, M_counter_q = 1'h0;
  reg [3:0] M_score0_d, M_score0_q = 1'h0;
  reg [3:0] M_score1_d, M_score1_q = 1'h0;
  reg [7:0] M_shift_d, M_shift_q = 1'h0;
  localparam INIT_state = 4'd0;
  localparam TEST0_state = 4'd1;
  localparam TEST1_state = 4'd2;
  localparam TEST2_state = 4'd3;
  localparam TEST3_state = 4'd4;
  localparam TEST4_state = 4'd5;
  localparam TEST5_state = 4'd6;
  localparam TEST6_state = 4'd7;
  localparam END_state = 4'd8;
  
  reg [3:0] M_state_d, M_state_q = INIT_state;
  wire [3-1:0] M_buttons_button_pressed;
  reg [3-1:0] M_buttons_button;
  button_3 buttons (
    .clk(clk),
    .rst(rst),
    .button(M_buttons_button),
    .button_pressed(M_buttons_button_pressed)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_4 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  reg [7:0] M_lvlCounter_d, M_lvlCounter_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_lvlCounter_d = M_lvlCounter_q;
    M_counter_d = M_counter_q;
    M_score1_d = M_score1_q;
    M_score0_d = M_score0_q;
    M_shift_d = M_shift_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_seg = 8'hff;
    led = M_lvlCounter_q;
    gled = 1'h0;
    bled = 1'h0;
    cled = 1'h0;
    ledclg = M_shift_q[0+2-:3];
    M_buttons_button = ~button;
    M_alu_alufn = 6'h00;
    M_alu_a = 8'h00;
    M_alu_b = 8'h00;
    io_sel = ~M_seg_sel;
    io_seg = ~M_seg_seg;
    M_seg_values = {M_score1_q, M_score0_q, 4'h0, 4'h0};
    
    case (M_state_q)
      INIT_state: begin
        gled = 1'h0;
        bled = 1'h0;
        cled = 1'h0;
        M_counter_d = 1'h0;
        M_score0_d = 1'h0;
        M_score1_d = 1'h0;
        M_shift_d = 1'h0;
        M_lvlCounter_d = 8'h1c;
        if (M_buttons_button_pressed == 3'h2) begin
          M_state_d = TEST0_state;
        end else begin
          if (M_buttons_button_pressed == 3'h1) begin
            M_alu_alufn = 6'h01;
            M_alu_a = M_lvlCounter_q;
            M_alu_b = 8'h01;
            M_lvlCounter_d = M_alu_out;
            M_state_d = TEST4_state;
          end
        end
      end
      TEST0_state: begin
        gled = 1'h1;
        M_counter_d = M_counter_q + 1'h1;
        if (M_score1_q[1+0-:1] == 1'h1) begin
          M_state_d = TEST6_state;
        end
        if (M_buttons_button_pressed) begin
          M_alu_alufn = 6'h33;
          M_alu_a = 8'h01;
          M_alu_b = M_buttons_button_pressed;
          if (M_alu_out[0+0-:1]) begin
            M_counter_d = 1'h0;
            gled = 1'h0;
            if (M_score0_q[3+0-:1] == 1'h1 & M_score0_q[0+0-:1] == 1'h1) begin
              M_score1_d = M_score1_q + 1'h1;
              M_score0_d = 1'h0;
            end else begin
              M_score0_d = M_score0_q + 1'h1;
            end
            M_state_d = TEST1_state;
          end else begin
            gled = 1'h0;
            M_counter_d = 1'h0;
            M_state_d = INIT_state;
          end
        end
        if (M_counter_q[(M_lvlCounter_q)*1+0-:1] == 1'h1) begin
          gled = 1'h0;
          M_counter_d = 1'h0;
          M_state_d = INIT_state;
        end
      end
      TEST1_state: begin
        bled = 1'h1;
        M_counter_d = M_counter_q + 1'h1;
        if (M_score1_q[1+0-:1] == 1'h1) begin
          M_state_d = TEST2_state;
        end
        if (M_buttons_button_pressed) begin
          M_alu_alufn = 6'h33;
          M_alu_a = 8'h01;
          M_alu_b = M_buttons_button_pressed;
          if (M_alu_out[0+0-:1]) begin
            M_counter_d = 1'h0;
            bled = 1'h0;
            if (M_score0_q[3+0-:1] == 1'h1 & M_score0_q[0+0-:1] == 1'h1) begin
              M_score1_d = M_score1_q + 1'h1;
              M_score0_d = 1'h0;
            end else begin
              M_score0_d = M_score0_q + 1'h1;
            end
            M_state_d = TEST0_state;
          end else begin
            gled = 1'h0;
            M_counter_d = 1'h0;
            M_state_d = INIT_state;
          end
        end
        if (M_counter_q[(M_lvlCounter_q)*1+0-:1] == 1'h1) begin
          bled = 1'h0;
          M_counter_d = 1'h0;
          M_state_d = INIT_state;
        end
      end
      TEST2_state: begin
        cled = 1'h1;
        M_counter_d = M_counter_q + 1'h1;
        if (M_score1_q[2+0-:1] == 1'h1) begin
          M_state_d = END_state;
        end
        if (M_buttons_button_pressed) begin
          M_alu_alufn = 6'h33;
          M_alu_a = 8'h01;
          M_alu_b = M_buttons_button_pressed;
          if (M_alu_out[0+0-:1]) begin
            M_counter_d = 1'h0;
            cled = 1'h0;
            if (M_score0_q[3+0-:1] == 1'h1 & M_score0_q[0+0-:1] == 1'h1) begin
              M_score1_d = M_score1_q + 1'h1;
              M_score0_d = 1'h0;
            end else begin
              M_score0_d = M_score0_q + 1'h1;
            end
            M_state_d = TEST3_state;
          end else begin
            gled = 1'h0;
            M_counter_d = 1'h0;
            M_state_d = INIT_state;
          end
        end
        if (M_counter_q[(M_lvlCounter_q)*1+0-:1] == 1'h1) begin
          cled = 1'h0;
          M_counter_d = 1'h0;
          M_state_d = INIT_state;
        end
      end
      TEST3_state: begin
        gled = 1'h1;
        M_counter_d = M_counter_q + 1'h1;
        if (M_score1_q[2+0-:1] == 1'h1) begin
          M_state_d = END_state;
        end
        if (M_buttons_button_pressed) begin
          M_alu_alufn = 6'h33;
          M_alu_a = 8'h02;
          M_alu_b = M_buttons_button_pressed;
          if (M_alu_out[0+0-:1]) begin
            M_counter_d = 1'h0;
            gled = 1'h0;
            if (M_score0_q[3+0-:1] == 1'h1 & M_score0_q[0+0-:1] == 1'h1) begin
              M_score1_d = M_score1_q + 1'h1;
              M_score0_d = 1'h0;
            end else begin
              M_score0_d = M_score0_q + 1'h1;
            end
            M_state_d = TEST2_state;
          end else begin
            gled = 1'h0;
            M_counter_d = 1'h0;
            M_state_d = INIT_state;
          end
        end
        if (M_counter_q[(M_lvlCounter_q)*1+0-:1] == 1'h1) begin
          gled = 1'h0;
          M_counter_d = 1'h0;
          M_state_d = INIT_state;
        end
      end
      TEST4_state: begin
        cled = 1'h1;
        M_counter_d = M_counter_q + 1'h1;
        if (M_score1_q[1+0-:1] == 1'h1) begin
          M_state_d = TEST2_state;
        end
        if (M_buttons_button_pressed) begin
          M_alu_alufn = 6'h33;
          M_alu_a = 8'h02;
          M_alu_b = M_buttons_button_pressed;
          if (M_alu_out[0+0-:1]) begin
            M_counter_d = 1'h0;
            cled = 1'h0;
            if (M_score0_q[3+0-:1] == 1'h1 & M_score0_q[0+0-:1] == 1'h1) begin
              M_score1_d = M_score1_q + 1'h1;
              M_score0_d = 1'h0;
            end else begin
              M_score0_d = M_score0_q + 1'h1;
            end
            M_state_d = TEST5_state;
          end else begin
            gled = 1'h0;
            M_counter_d = 1'h0;
            M_state_d = INIT_state;
          end
        end
        if (M_counter_q[(M_lvlCounter_q)*1+0-:1] == 1'h1) begin
          cled = 1'h0;
          M_counter_d = 1'h0;
          M_state_d = INIT_state;
        end
      end
      TEST5_state: begin
        bled = 1'h1;
        M_counter_d = M_counter_q + 1'h1;
        if (M_score1_q[1+0-:1] == 1'h1) begin
          M_state_d = TEST2_state;
        end
        if (M_buttons_button_pressed) begin
          M_alu_alufn = 6'h33;
          M_alu_a = 8'h04;
          M_alu_b = M_buttons_button_pressed;
          if (M_alu_out[0+0-:1]) begin
            M_counter_d = 1'h0;
            bled = 1'h0;
            if (M_score0_q[3+0-:1] == 1'h1 & M_score0_q[0+0-:1] == 1'h1) begin
              M_score1_d = M_score1_q + 1'h1;
              M_score0_d = 1'h0;
            end else begin
              M_score0_d = M_score0_q + 1'h1;
            end
            M_state_d = TEST4_state;
          end else begin
            gled = 1'h0;
            M_counter_d = 1'h0;
            M_state_d = INIT_state;
          end
        end
        if (M_counter_q[(M_lvlCounter_q)*1+0-:1] == 1'h1) begin
          bled = 1'h0;
          M_counter_d = 1'h0;
          M_state_d = INIT_state;
        end
      end
      TEST6_state: begin
        M_alu_alufn = 6'h20;
        M_alu_a = M_shift_q;
        M_alu_b = 8'h01;
        M_shift_d = M_alu_out;
        M_state_d = TEST2_state;
      end
      END_state: begin
        gled = 1'h1;
        bled = 1'h1;
        M_counter_d = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_score0_q <= 1'h0;
      M_score1_q <= 1'h0;
      M_shift_q <= 1'h0;
      M_lvlCounter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_score0_q <= M_score0_d;
      M_score1_q <= M_score1_d;
      M_shift_q <= M_shift_d;
      M_lvlCounter_q <= M_lvlCounter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
